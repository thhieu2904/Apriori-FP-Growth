# main_apriori_visualizer.py
import streamlit as st
import pandas as pd
from algorithms.apriori_logic import AprioriAlgorithm
from utils.data_loader import load_transactions_from_file, get_unique_items_from_transactions
from utils.metrics_collector import PerformanceMetrics
from utils.visualizers import display_itemsets_table, display_rules_table

st.set_page_config(layout="wide", page_title="Apriori Visualizer")
st.title("üìä Tr√¨nh Tr·ª±c Quan H√≥a Thu·∫≠t To√°n Apriori")
st.markdown("""
    ·ª®ng d·ª•ng n√†y cho ph√©p b·∫°n t·∫£i l√™n d·ªØ li·ªáu giao d·ªãch, ch·∫°y thu·∫≠t to√°n Apriori,
    v√† tr·ª±c quan h√≥a c√°c b∆∞·ªõc trung gian c≈©ng nh∆∞ k·∫øt qu·∫£ cu·ªëi c√πng.
""")

# --- Sidebar ---
st.sidebar.header("üìÅ T·∫£i D·ªØ Li·ªáu v√† Tham S·ªë")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file (ƒë√£ ti·ªÅn x·ª≠ l√Ω n·∫øu c·∫ßn)", type=['csv', 'xlsx', 'xls'])

# C·∫•u h√¨nh c·ªôt (c√≥ th·ªÉ ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p n·∫øu c·∫ßn)
invoice_col_name = st.sidebar.text_input("T√™n c·ªôt M√£ H√≥a ƒê∆°n/Giao D·ªãch", "InvoiceNo")
item_col_name = st.sidebar.text_input("T√™n c·ªôt T√™n S·∫£n Ph·∫©m/Item", "Description")

min_support_percentage = st.sidebar.slider("Ng∆∞·ª°ng Support T·ªëi Thi·ªÉu (%)", 0.1, 10.0, 1.0, 0.1,
                                           help="T·ª∑ l·ªá ph·∫ßn trƒÉm giao d·ªãch t·ªëi thi·ªÉu m√† m·ªôt itemset ph·∫£i xu·∫•t hi·ªán.")
min_confidence_percentage = st.sidebar.slider("Ng∆∞·ª°ng Confidence T·ªëi Thi·ªÉu (%)", 1.0, 100.0, 50.0, 1.0,
                                     help="ƒê·ªô tin c·∫≠y t·ªëi thi·ªÉu c·ªßa m·ªôt lu·∫≠t k·∫øt h·ª£p.")

# --- Main Area ---
if uploaded_file:
    transactions, initial_trans_count, initial_items_count = load_transactions_from_file(
        uploaded_file, 
        invoice_col=invoice_col_name, 
        item_col=item_col_name
    )

    if transactions:
        num_total_transactions = len(transactions)
        unique_items_processed = get_unique_items_from_transactions(transactions)
        
        st.info(f"""
        **Th√¥ng tin d·ªØ li·ªáu ƒë√£ t·∫£i:**
        - S·ªë giao d·ªãch ban ƒë·∫ßu (∆∞·ªõc t√≠nh t·ª´ file): {initial_trans_count}
        - S·ªë s·∫£n ph·∫©m duy nh·∫•t ban ƒë·∫ßu (∆∞·ªõc t√≠nh t·ª´ file): {initial_items_count}
        - S·ªë giao d·ªãch ƒë√£ x·ª≠ l√Ω (sau khi lo·∫°i b·ªè giao d·ªãch r·ªóng): {num_total_transactions}
        - S·ªë s·∫£n ph·∫©m duy nh·∫•t ƒë√£ x·ª≠ l√Ω: {len(unique_items_processed)}
        """)

        min_support_count = int((min_support_percentage / 100.0) * num_total_transactions)
        actual_min_support_percentage = (min_support_count / num_total_transactions) * 100 if num_total_transactions > 0 else 0
        
        st.sidebar.markdown("---")
        st.sidebar.write(f"**Ng∆∞·ª°ng Support Tuy·ªát ƒê·ªëi:** `{min_support_count}` giao d·ªãch")
        st.sidebar.write(f"(T∆∞∆°ng ƒë∆∞∆°ng kho·∫£ng `{actual_min_support_percentage:.2f}%`)")
        
        min_confidence_threshold = min_confidence_percentage / 100.0
        st.sidebar.write(f"**Ng∆∞·ª°ng Confidence:** `{min_confidence_threshold:.2f}`")

        if st.sidebar.button("üöÄ Ch·∫°y Thu·∫≠t To√°n Apriori", type="primary"):
            if num_total_transactions == 0:
                st.error("Kh√¥ng c√≥ giao d·ªãch n√†o ƒë·ªÉ x·ª≠ l√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i file d·ªØ li·ªáu.")
            else:
                st.session_state.apriori_run_completed = False
                st.session_state.apriori_frequent_itemsets = {}
                st.session_state.apriori_intermediate_steps = []
                st.session_state.apriori_rules = []
                st.session_state.apriori_metrics = None

                metrics_collector = PerformanceMetrics()
                apriori_algo = AprioriAlgorithm(transactions, min_support_count, metrics_collector)
                
                with st.spinner("‚è≥ ƒêang ch·∫°y thu·∫≠t to√°n Apriori... Vui l√≤ng ch·ªù."):
                    frequent_itemsets, intermediate_steps = apriori_algo.run()
                    
                    st.session_state.apriori_frequent_itemsets = frequent_itemsets
                    st.session_state.apriori_intermediate_steps = intermediate_steps
                    st.session_state.apriori_metrics = metrics_collector # L∆∞u object metrics

                    # Sinh lu·∫≠t n·∫øu c√≥ itemset ph·ªï bi·∫øn
                    if frequent_itemsets:
                        rules = apriori_algo.generate_association_rules(frequent_itemsets, min_confidence_threshold)
                        st.session_state.apriori_rules = rules
                    else:
                        st.session_state.apriori_rules = []
                
                st.session_state.apriori_run_completed = True
                st.success("‚úÖ Thu·∫≠t to√°n Apriori ƒë√£ ch·∫°y xong!")

        # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        if st.session_state.get("apriori_run_completed", False):
            metrics: PerformanceMetrics = st.session_state.get("apriori_metrics")
            
            tab1, tab2, tab3, tab4 = st.tabs([
                "üìä T·ªïng Quan & S·ªë Li·ªáu", 
                "üîÑ B∆∞·ªõc Trung Gian", 
                "üíé T·∫≠p M·ª•c Ph·ªï Bi·∫øn", 
                "üìú Lu·∫≠t K·∫øt H·ª£p"
            ])

            with tab1:
                st.header("T·ªïng Quan Th·ª±c Thi v√† S·ªë Li·ªáu Hi·ªáu NƒÉng")
                if metrics:
                    overall_summary = metrics.get_overall_metrics_summary()
                    st.metric(label="T·ªïng Th·ªùi Gian Ch·∫°y", value=f"{overall_summary['total_duration_seconds']} gi√¢y")
                    col_mem1, col_mem2, col_mem3 = st.columns(3)
                    col_mem1.metric(label="B·ªô Nh·ªõ Ban ƒê·∫ßu", value=f"{overall_summary['initial_memory_MB']} MB")
                    col_mem2.metric(label="B·ªô Nh·ªõ Cu·ªëi C√πng", value=f"{overall_summary['final_memory_MB']} MB")
                    col_mem3.metric(label="B·ªô Nh·ªõ ƒê·ªânh (∆∞·ªõc t√≠nh)", value=f"{overall_summary['peak_memory_usage_MB']} MB")

                    st.subheader("S·ªë li·ªáu chi ti·∫øt c·ªßa Apriori:")
                    apriori_specific_metrics = metrics.get_apriori_metrics_summary()
                    st.write(f"- T·ªïng s·ªë ·ª©ng vi√™n ƒë√£ t·∫°o: `{apriori_specific_metrics['total_candidates_generated']}`")
                    st.write(f"- T·ªïng s·ªë t·∫≠p m·ª•c ph·ªï bi·∫øn ƒë√£ t√¨m th·∫•y: `{apriori_specific_metrics['total_frequent_itemsets_found']}`")
                    
                    if apriori_specific_metrics['candidates_per_k']:
                         st.write("Chi ti·∫øt ·ª©ng vi√™n theo k:")
                         st.json(apriori_specific_metrics['candidates_per_k'])
                    if apriori_specific_metrics['frequent_itemsets_per_k']:
                         st.write("Chi ti·∫øt t·∫≠p m·ª•c ph·ªï bi·∫øn theo k:")
                         st.json(apriori_specific_metrics['frequent_itemsets_per_k'])


                    st.subheader("Th·ªùi Gian v√† B·ªô Nh·ªõ T·ª´ng B∆∞·ªõc Ch√≠nh:")
                    step_metrics_df = pd.DataFrame(metrics.get_step_metrics_table())
                    if not step_metrics_df.empty:
                        # ƒê·ªãnh d·∫°ng l·∫°i s·ªë cho d·ªÖ ƒë·ªçc
                        step_metrics_df['duration_seconds'] = step_metrics_df['duration_seconds'].apply(lambda x: f"{x:.4f}")
                        step_metrics_df['memory_before_MB'] = step_metrics_df['memory_before_MB'].apply(lambda x: f"{x:.2f}")
                        step_metrics_df['memory_after_MB'] = step_metrics_df['memory_after_MB'].apply(lambda x: f"{x:.2f}")
                        step_metrics_df['memory_change_MB'] = step_metrics_df['memory_change_MB'].apply(lambda x: f"{x:+.2f}")
                        st.dataframe(step_metrics_df[[
                            "step_name", "duration_seconds", 
                            "memory_before_MB", "memory_after_MB", "memory_change_MB",
                            "candidate_count", "frequent_count" # Th√™m c√°c c·ªôt n√†y n·∫øu c√≥ trong additional_info
                        ]], hide_index=True)
                    else:
                        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt t·ª´ng b∆∞·ªõc.")
                else:
                    st.warning("Kh√¥ng c√≥ s·ªë li·ªáu hi·ªáu nƒÉng ƒë·ªÉ hi·ªÉn th·ªã.")

            with tab2:
                st.header("C√°c B∆∞·ªõc Trung Gian c·ªßa Thu·∫≠t To√°n Apriori")
                intermediate_steps = st.session_state.get("apriori_intermediate_steps", [])
                if not intermediate_steps:
                    st.info("Kh√¥ng c√≥ b∆∞·ªõc trung gian n√†o ƒë∆∞·ª£c ghi l·∫°i ho·∫∑c thu·∫≠t to√°n ch∆∞a ch·∫°y.")
                else:
                    for i, step_log in enumerate(intermediate_steps):
                        step_title = f"B∆∞·ªõc {i+1}: {step_log['step_name']}"
                        if 'k' in step_log: step_title += f" (k={step_log['k']})"
                        
                        with st.expander(step_title, expanded=False):
                            if 'notes' in step_log:
                                st.caption(f"Ghi ch√∫: {step_log['notes']}")
                            
                            data_content = step_log['data']
                            if isinstance(data_content, dict): # Th∆∞·ªùng l√† {itemset: count}
                                display_itemsets_table(st, "D·ªØ li·ªáu b∆∞·ªõc:", data_content, k=step_log.get('k'))
                            elif isinstance(data_content, list) and data_content and isinstance(data_content[0], frozenset): # List of candidate itemsets
                                display_itemsets_table(st, "D·ªØ li·ªáu b∆∞·ªõc (·ª©ng vi√™n):", data_content, k=step_log.get('k'))
                            elif isinstance(data_content, list) and data_content and isinstance(data_content[0], dict) and 'antecedent' in data_content[0]: # Rules
                                display_rules_table(st, "Lu·∫≠t ƒë∆∞·ª£c t·∫°o ·ªü b∆∞·ªõc n√†y:", data_content, num_total_transactions)
                            else: # D·ªØ li·ªáu kh√°c
                                st.json(data_content, expanded=False)
            
            with tab3:
                st.header("üíé C√°c T·∫≠p M·ª•c Ph·ªï Bi·∫øn (Frequent Itemsets)")
                frequent_itemsets = st.session_state.get("apriori_frequent_itemsets", {})
                if not frequent_itemsets:
                    st.info(f"Kh√¥ng t√¨m th·∫•y t·∫≠p m·ª•c ph·ªï bi·∫øn n√†o v·ªõi ng∆∞·ª°ng support = {min_support_count} ({actual_min_support_percentage:.2f}%).")
                else:
                    st.success(f"T√¨m th·∫•y t·ªïng c·ªông {sum(len(itemsets) for itemsets in frequent_itemsets.values() if isinstance(itemsets, dict)) if isinstance(frequent_itemsets,dict) and all(isinstance(val, dict) for val in frequent_itemsets.values()) else len(frequent_itemsets)} t·∫≠p m·ª•c ph·ªï bi·∫øn.")
                    
                    # Hi·ªÉn th·ªã theo k n·∫øu c·∫•u tr√∫c l√† {k: {itemset: count}}
                    # Ho·∫∑c hi·ªÉn th·ªã t·∫•t c·∫£ n·∫øu l√† {itemset: count}
                    if isinstance(frequent_itemsets, dict) and frequent_itemsets and isinstance(next(iter(frequent_itemsets.values())), dict):
                         # Tr∆∞·ªùng h·ª£p n√†y kh√¥ng x·∫£y ra v·ªõi logic Apriori hi·ªán t·∫°i (tr·∫£ v·ªÅ flat dict)
                         # Nh∆∞ng ƒë·ªÉ ph√≤ng h·ªù n·∫øu thay ƒë·ªïi c·∫•u tr√∫c tr·∫£ v·ªÅ
                         for k_val, k_itemsets in sorted(frequent_itemsets.items()):
                             display_itemsets_table(st, f"C√°c t·∫≠p {k_val}-itemset ph·ªï bi·∫øn", k_itemsets, k=k_val)
                    else: # Flat dictionary {itemset: count}
                        display_itemsets_table(st, "T·∫•t c·∫£ c√°c t·∫≠p m·ª•c ph·ªï bi·∫øn", frequent_itemsets)


            with tab4:
                st.header("üìú Lu·∫≠t K·∫øt H·ª£p")
                rules = st.session_state.get("apriori_rules", [])
                if not rules:
                    st.info(f"Kh√¥ng c√≥ lu·∫≠t k·∫øt h·ª£p n√†o ƒë∆∞·ª£c t·∫°o ra v·ªõi min_confidence = {min_confidence_threshold:.2f}.")
                else:
                    st.success(f"T√¨m th·∫•y {len(rules)} lu·∫≠t k·∫øt h·ª£p.")
                    display_rules_table(st, f"C√°c Lu·∫≠t K·∫øt H·ª£p (min_confidence={min_confidence_threshold:.2f})", 
                                        rules, num_total_transactions)
    else:
        if uploaded_file: # File ƒë√£ t·∫£i l√™n nh∆∞ng kh√¥ng c√≥ transactions (v√≠ d·ª• l·ªói ƒë·ªçc file)
            st.warning("Kh√¥ng th·ªÉ x·ª≠ l√Ω file d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† n·ªôi dung file.")

else:
    st.info("Ch√†o m·ª´ng! Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu giao d·ªãch ·ªü thanh b√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

st.sidebar.markdown("---")
st.sidebar.markdown("ƒê·ªì √°n KPDL - So s√°nh Apriori v√† FP-Growth")
